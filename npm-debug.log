0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish', '.' ]
2 info using npm@2.14.12
3 info using node@v4.3.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/cloud/work/karat/gulpman',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/cloud/.npm/gulpman/1.6.13/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/cloud/.npm/gulpman/1.6.13/package.tgz',
9 verbose tar pack   '/Users/cloud/work/karat/gulpman' ]
10 verbose tarball /Users/cloud/.npm/gulpman/1.6.13/package.tgz
11 verbose folder /Users/cloud/work/karat/gulpman
12 info prepublish gulpman@1.6.13
13 verbose addLocalTarball adding from inside cache /Users/cloud/.npm/gulpman/1.6.13/package.tgz
14 silly cache afterAdd gulpman@1.6.13
15 verbose afterAdd /Users/cloud/.npm/gulpman/1.6.13/package/package.json not in flight; writing
16 verbose afterAdd /Users/cloud/.npm/gulpman/1.6.13/package/package.json written
17 silly publish { name: 'gulpman',
17 silly publish   version: '1.6.13',
17 silly publish   description: 'Create Modular Front-End Build System. Based on gulp, very easy and light',
17 silly publish   engines: { node: '>=4.2.0' },
17 silly publish   main: 'index.js',
17 silly publish   scripts: { postinstall: 'sh ./scripts/install.sh', test: 'make test' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/xunuoi/gulpman.git' },
17 silly publish   keywords:
17 silly publish    [ 'gulp',
17 silly publish      'modular',
17 silly publish      'gulpman',
17 silly publish      'scss',
17 silly publish      'es6',
17 silly publish      'react',
17 silly publish      'jsx',
17 silly publish      'build',
17 silly publish      'easy',
17 silly publish      'fis',
17 silly publish      'component' ],
17 silly publish   author: { name: 'Lucas X' },
17 silly publish   license: 'MIT',
17 silly publish   bugs: { url: 'https://github.com/xunuoi/gulpman/issues' },
17 silly publish   homepage: 'https://github.com/xunuoi/gulpman#readme',
17 silly publish   devDependencies: { gulp: '^3.9.0', 'gulp-sass': '^2.0.4' },
17 silly publish   dependencies:
17 silly publish    { 'gulp-babel': '^6.1.1',
17 silly publish      browserify: '^11.2.0',
17 silly publish      stringify: '^4.0.1',
17 silly publish      colors: '^1.1.2',
17 silly publish      'event-stream': '^3.3.2',
17 silly publish      globby: '^2.1.0',
17 silly publish      'gulp-cssnano': '^2.1.0',
17 silly publish      'gulp-imagemin': '^2.3.0',
17 silly publish      'gulp-load-plugins': '^1.0.0-rc.1',
17 silly publish      'gulp-rename': '^1.2.2',
17 silly publish      'gulp-rev': '^7.0.0',
17 silly publish      'gulp-rev-all': '^0.8.22',
17 silly publish      'gulp-sequence': '^0.4.4',
17 silly publish      'gulp-uglify': '^1.2.0',
17 silly publish      'gulp-usemin': '^0.3.21',
17 silly publish      'imagemin-pngquant': '^4.1.2',
17 silly publish      'readable-stream': '^2.0.5',
17 silly publish      'object-assign': '^4.0.1',
17 silly publish      shelljs: '^0.5.3',
17 silly publish      through2: '^2.0.0',
17 silly publish      'vinyl-buffer': '^1.0.0',
17 silly publish      'vinyl-source-stream': '^1.1.0',
17 silly publish      'gulp-util': '^3.0.7',
17 silly publish      jsmin2: '^1.1.7',
17 silly publish      uglifycss: '0.0.18',
17 silly publish      bluebird: '^2.9.3',
17 silly publish      css: '^2.1.0',
17 silly publish      extend: '^2.0.0',
17 silly publish      'fs-extra': '^0.14.0',
17 silly publish      spritesmith: '^1.0.3' },
17 silly publish   readme: '\n[![Coverage Status](https://raw.githubusercontent.com/xunuoi/gulpman/master/assets/logo.png)](http://karat.cc/article/56a351c3e48d2d05682aa0ac/)\n\n-----\n\n[![NPM version](https://img.shields.io/npm/v/gulpman.svg?style=flat-square)](http://badge.fury.io/js/gulpman)\n<img src="https://raw.githubusercontent.com/xunuoi/gulpman/master/assets/build.png?style=flat-square" width="90" alt="Build status" />\n<img src="https://raw.githubusercontent.com/xunuoi/gulpman/master/assets/coverage.png?style=flat-square" width="106" alt="Coverage Status" />\n\n\n# gulpman\n\n- Create Modular Front-End Build System, based on gulp , more light and easier than FIS!\n- 基于`gulp`的前端组件化、模块化解决方案，比百度`FIS`更简单、灵活、可控性高，会gulp就会定制自己的方案\n- 支持图片`base64`方式嵌入到`html/CSS`\n- 支持`JS/CSS`内联方式嵌入html文件\n- 整合`spritesmith`，简单生成sprite雪碧图\n- 整合`usemin`，构建合并更加灵活强大\n- 支持前端js模板嵌入，`tpl`格式的直接构建打包到最终js文件\n- 集成`SCSS|ES6|ReactJS|Babel|Browserify|cssnano|uglify|imagmein`等常用组件，做到一站式自动化解决方案，同时清晰、可控，定制、修改简单\n- 扩展性高，`gulp`现有的插件都可以拼装、加入到`gulpman`中使用，你可以自己根据实际情况组合、修改，比如可以轻松整合`browser-sync`到构建系统中。\n\n\n\n##Introduction 说明\n- 支持Mac、Linux环境下安装、使用\n- Windows环境未做完整安装测试，由于安装脚本使用到shell，windows不支持shell，执行完`npm install gulpman --save-dev`后，可能需要手动安装`gulp`、`gulp-sass`模块\n- 如果手动安装`gulp-sass`,建议使用淘宝的`cnpm`来完成，避免国内网络导致`npm`安装失败\n- Node版本需要不低于4.2.0，如果要兼容0.1x的旧版本nodejs，请考虑修改或转换`index.js`、`lib`等目录和文件中源码的ES6语句\n\n\n##Install 安装\n- `npm install gulpman --save-dev`\n\n#### 注：\n* 安装中若npm报出目录权限导致的error，比如涉及到`/usr/local/lib/node_modules`权限的报错，请请检查其权限是否正常并用chown来修复，将拥有者修改为当前登录用户即可。\n* 可以使用 `sudo chown -R "$(whoami)"`+`路径`来修复\n* 不要使用`sudo npm install`来手工安装因为权限问题而失败的模块。请修改权限后，再用`npm install`来安装即可\n* 如果你本地node和npm的安装和权限正常，那gulpman的安装过程应该都是顺利和成功的。\n\n\n\n##Config 配置\n\n###0. 支持自动默认模式，无需配置即使用\n\n* 可直接跳过`Config 配置`处的说明，直接去看后面的`Usage 使用`内容\n\n\n###1. 配置 gulpfile.js:\n\n- 只需要require gulpman模块，就会自动加载`gm:publish`, `gm:develop`（开发监视模式）等task到环境中\n- 使用时在命令行中直接输入`gulp gm:publish`即可执行gulpman预置的任务\n\n\n```Javascript\n/**\n * Gulpfile.js\n */\n\n\nvar gulp = require(\'gulp\'),\n    gman = require(\'gulpman\')\n\n// your other tasks ...你的其他task\n// xxx ...\n\n\n/**\n * 配置gulpman ======================\n * Use config API\n * 设置路径、CDN、资源URL前缀等，API简单\n */\n\ngman.config({\n    \n    // 是否使用绝对路径，默认值true, 推荐使用，方便服务器配置。比如`/static/home/main.js`这种风格。\n    // 如果无服务端情况下，本地调试，可以设置is_absolute为false, 那么会是类似`../../assets/static/home/main.js`这种风格\n    \'is_absolute\': true,\n\n    // cdn prefix 配置CDN， 支持［字符串|数组|函数］ 3中传参方式\n    \'cdn_prefix\': \'\', \n\n    // 配置资源URL前缀，建议类似 /static这种\n    // usually set as /static, this involves the server config ,such as the static path of nginx\n    \'url_prefix\': \'/static\' \n\n\n    /** use spritesmith for css-img sprite\n     * 基于spritesmith实现, 详细参见https://github.com/Ensighten/spritesmith\n     * 传递自动生成雪碧图的spritesmit的options\n     **/\n    //\'spritesmith\': { },保持默认即可\n    \n    /** usemin config 配置usemin,保持默认即可 **/\n    // \'usemin\': {}\n\n\n    // 模块COMPONENTS目录，同一个模块的html和资源文件在一起。默认 \'components\'即可\n    \'components\': \'components\',\n\n    // develop和publish下的views目录，跟服务端框架的views目录配置一致，比如express\n    \'runtime_views\': \'views\',\n    \'dist_views\': \'views_dist\',\n\n    // develop和publish下的assets静态目录，跟服务器配置有关，比如nginx的static目录指向\n    \'runtime_assets\': \'assets\',\n    \'dist_assets\': \'assets_dist\',\n\n    // 第三方JS类库、模块的目录，推荐设置为`lib`或`bower_components`（这样bower可以直接安装到这个目录）\n    // 这个目录默认打包时为全局模块目录，可以直接`import xxx from \'xxx\'`，而不用加相对路径\n    // the js library dir, set as a global module. Also you can set as bower_components\n    \'lib\': \'lib\', \n\n    // 可以添加一个自定的全局模块目录，该目录下的js模块，也作为全局模块来require，不需要相对路径。\n    // the global module dir\n    \'global\': \'common\' \n})\n\n\n```\n\n###2. 如何更好的配置CDN\n\n* `cdn_prefix`支持 字符串、数组、函数\n* 如果传入数组，那么按照随机来分配\n* 如果传入函数，函数会获1个参数，`mediaFile`, 就是当前被css或html中引用到的资源文件名，可以根据文件名做cdn分配\n\n```Javascript\n\n\'cdn_prefix\': function (fileName) {\n        \n        console.log(fileName)\n\n        var c_list = [\n            \'http://s0.com\', \n            \'http://s1.com\', \n            \'http://s2.com\', \n            \'http://s3.com\',\n            \'http://s4.com\'\n        ]\n        // 你自可以自实现分配策略\n        if(hostFile.match(/\\.html$/gm)){\n            return c_list[0]\n        }else {\n            return c_list[1]\n        }\n    },\n```\n\n###3. 对于`is_absolute`的说明\n\n* `is_absolute`是指输出的html文件中的资源src/url，否使用绝对路径，默认值true，即启用绝对目录。 \n\n* [常用]当使用服务器配置静态目录的情况下，推荐使用绝对目录。比如配合nginx，指定某个目录为静态资源目录。类似`/static/home/main.js`这种风格。\n\n* 如果无服务端情况下，有需要本地调试，推荐设置is_absolute为false, 即启用相对路径。类似`../../assets/static/home/main.js`这种风格。\n\n* 当is_absolute为false(启用相对路径)的情况下，直接打开输出的views目录下的html文件，就可以正常浏览、运行、调试\n\n\n\n###4. gulpman目录说明\n\n* 使用gulpman按照模块划分后，模块根目录可以是`./components`(默认，可配置)，如果你有个模块是foo，那么应该有如下目录：`./components/foo`，然后跟foo模块相关的`html|js|css|fonts|image`等资源文件都放到`foo`下，这个结构下，做开发时非常清晰、高效，便于模块组织、资源定位等。\n\n* 通过`gm:develop`命令进入`develop`开发模式后，会自动生成模板`views`目录，和静态资源`assets`目录。\n\n* 通过`gm:publish`命令来构建发布资源，会自动生成生产环境下的模板目录`views_dist`，和静态资源目录`assets_dist`。\n\n\n###5. 什么是全局模块目录：\n\n- 对应`Browserify`的打包功能，`全局目录`是指可以直接`require`或者`import`其下的js模块的目录\n\n- `gulpman.config`的配置中，`lib`和`global`都是JS的全局模块目录。举个例子说明：\n* 你的`components/lib`目录下有一个模块 `foo.js`，就是: `components/lib/foo.js`，那么你在你的es6文件中，就可以这样使用：`import foo from \'foo\'`，不需要写成 `import foo from \'../lib/foo\'`\n\n- 同理`global`那个配置也是这样的，推荐将lib目录设置成跟`bower`一致的，全部来存放第三方类库，而`global`设置的目录，比如叫`common`，可以存放自己的`公用模块`。这样开发会更加灵活、方便。\n\n- 注意全局模块不要有同名冲突。\n\n\n###6. 支持复杂目录和多级目录设定\n\n* 比如下面这种复杂路径：\n\n```Javascript\ngulpman.config({\n    \'is_absolute\': false,\n    \'components\': \'components/cc\',\n    \'runtime_views\': \'runtime_views/rv\',\n    \'dist_views\': \'dist_views/dv/dv\',\n\n    \'dist_assets\': \'dist_assets/da\',\n    \'runtime_assets\': \'runtime_assets/ra/ra\',\n})\n```\n\n\n##Usage 使用\n\n###1. CLI 执行Task:\n\n```Shell\n\n# 初始化目录，建立components目录并添加一份html的demo文件\n# init components dir and a html demo\ngulp gm:init\n\n\n# develop and watch 开发模式，监视相关文件变动，增量更新\ngulp gm:develop\n\n# 指定监视某个component, 提高性能和效率\ngulp gm:develop -c component_name\n\n\n# publish 发布资源，包括合并、压缩资源、rev产生MD5等\ngulp gm:publish\n\n# publish命令支持`-a`和`-v`参数指定输出资源/模板目录(可选)\ngulp gm:publish -v your_views_dist -a your_assets_dist\n\n# clean 清理构建输出的目录和文件\ngulp gm:clean\n\n# 编译输出一份运行时资源文件，但是不进入监视状态\n# compile for develop, not watch\ngulp gm:compile\n\n```\n\n\n###2. 开发中只监视某个component目录\n\n* 随着项目变大，开发中如果全局监视所有component资源，效率将会降低，因此可使用gulpman提供的监视子component的方式来开发，提高性能\n\n* 比如说，只监视components目录下的home模块：\n\n```Shell\n\ngulp gm:develop -c home\n\n```\n\n\n\n###3. 如何在gulpman下使用React\n\n* 方法一：通过script标签引入React类库到HTML (推荐)\n\n```html\n<script type="text/javascript" src="./lib/react-0.14.6/build/react.min.js"></script>\n<script type="text/javascript" src="./lib/react-0.14.6/build/react-dom.min.js"></script>\n```\n\n* 方法二：直接在ES6/JSX文件中引入React模块\n\n注意：引入的react文件是为Gulpman预置的，已经修改过来兼容browserify，从而在window中暴露React和ReactDOM对象供开发者调用：\n\n```Javascript\nimport \'react\'\n```\n\n\n###4. 如何在js|es6|jsx中使用tpl模板\n\n* 目前支持.tpl扩展名的模板文件，直接打包到最终的js文件中\n\n* 用法：`import dialogTpl from \'./dialog.tpl\'` 或者 `var dialogTpl = require(\'./dialog.tpl\')`\n\n\n\n###5. 如何在HTML/CSS中嵌入base64编码的图片\n\n* 只需要图片资源后面添加`?_gm_inline`即可\n* 打包时候会将图片生成`base64`编码替换到到html中\n\n\n#####html\n\n```html\n<p class="play"> \n    <img width="480" alt="Karat 克拉" src="./img/testb64.png?_gm_inline" />\n</p>\n```\n\n#####CSS/SCSS\n\n```css\n\n.test {\n    background: url(./img/testb64.png?_gm_inline) no-repeat;\n}\n```\n\n###6. 如何在HTML中嵌入内联CSS/JS\n\n* 类似图片base64,只需要资源后面添加`?_gm_inline`即可\n\n```html\n<script src="./plugin.js?_gm_inline" type="text/javascript"></script>\n\n<link href="./dialog.css?_gm_inline" rel="stylesheet" type="text/css" >\n```\n\n* 注：所有内嵌嵌入的资源，包括图片/JS/CSS，在develop(监视)模式下，都已自动关联更新。即如果a.html文件中，内联嵌入了一个b.css，如果b.css发生了修改，那么a.html会自动编译更新。\n\n\n###7. 如何使用Sprite雪碧图\n\n* 基于spritesmith实现，在gulpman.config 中可传入spritesmith配置opts\n* 关于spritesmith详细参见：[https://github.com/Ensighten/spritesmith](https://github.com/Ensighten/spritesmith)\n* 只需要在scss文件中的图片url资源后面添加`?_gm_sprite`即可\n\n```css\n.demo {\n    background: url(./img/abc.png?_gm_sprite) no-repeat;\n    \n    /* other style you can set ...*/\n    width: 50px;\n    height: 50px;\n}\n```\n\n###8. 如何使用Usemin\n\n* 整合usemin，在gulpman.config 中可传入usemin的配置opts\n* 关于usemin详细参见：[https://github.com/zont/gulp-usemin](https://github.com/zont/gulp-usemin)\n* 只需要在html文件中添加usemin的build注释即可。支持`js`|`css`|`inlinejs`|`inlinecss`等语法\n* 注意build注释中配置的输出路径写相对路径即可，跟script、link等标签类似，gulpman会自动转换成最终输出路径\n\n```html\n\n<!-- build:css ./home.css -->\n<link rel="stylesheet" type="text/css" href="./main.css">\n<link rel="stylesheet" type="text/css" href="./fff.css">\n<!-- endbuild -->\n\n\n<!-- build:js ../lib/base_lib.js -->\n<script type="text/javascript" src="../lib/jquery.js"></script>\n<script type="text/javascript" src="../lib/react.js"></script>\n<!-- endbuild -->\n```\n\n\n###9. 如何使用前端js模板\n* 支持tpl扩展名，放到components相关目录下即可，js 可以直接require或者import\n* 最终会作为字符串格式打包进js\n* tpl中仍然支持资源嵌入和图片base64等，如参照前面_gm_inline等语法即可\n\n- import到es6中\n```js\n    import dialogTpl from \'./dialog.tpl\'\n```\n\n- 或者使用require语法\n```js\n    var dialogTpl = require(\'./dialog.tpl\')\n```\n\n\n\n\n###教程\n[浏览教程链接](http://karat.cc/article/56a351c3e48d2d05682aa0ac "karat.cc")\n\n###License\nMIT\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '8e4368ecb4b2ca2077e7bc078753f66dd76ce57b',
17 silly publish   _id: 'gulpman@1.6.13',
17 silly publish   _shasum: 'e317d50394df66cffb203a911c64de60e685ac5c',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name gulpman
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/gulpman
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/cloud/.npm/gulpman/1.6.13/package.tgz
25 verbose request uri https://registry.npmjs.org/gulpman
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 19:35:25
28 verbose request using bearer token for auth
29 verbose request id 93241ebeeaab0dcd
30 http request PUT https://registry.npmjs.org/gulpman
31 http 403 https://registry.npmjs.org/gulpman
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Sun, 27 Mar 2016 11:35:30 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-itm7421-ITM',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1459078526.677194,VS0,VE3576' }
33 verbose request invalidating /Users/cloud/.npm/registry.npmjs.org/gulpman on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 1.6.13." : gulpman
35 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1082:10)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid gulpman
38 verbose cwd /Users/cloud/work/karat/gulpman
39 error Darwin 14.5.0
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "."
41 error node v4.3.1
42 error npm  v2.14.12
43 error code E403
44 error "You cannot publish over the previously published version 1.6.13." : gulpman
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
